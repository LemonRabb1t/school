// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/03/2022 00:19:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab6pt3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab6pt3_vlg_sample_tst(
	A,
	B,
	clk,
	En,
	resetA,
	resetB,
	resetFSM,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  clk;
input  En;
input  resetA;
input  resetB;
input  resetFSM;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or clk or En or resetA or resetB or resetFSM)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab6pt3_vlg_check_tst (
	lower,
	sign,
	student_id,
	upper,
	y/n,
	sampler_rx
);
input [0:6] lower;
input [0:6] sign;
input [0:6] student_id;
input [0:6] upper;
input [0:6] y/n;
input sampler_rx;

reg [0:6] lower_expected;
reg [0:6] sign_expected;
reg [0:6] student_id_expected;
reg [0:6] upper_expected;
reg [0:6] y/n_expected;

reg [0:6] lower_prev;
reg [0:6] sign_prev;
reg [0:6] student_id_prev;
reg [0:6] upper_prev;
reg [0:6] y/n_prev;

reg [0:6] lower_expected_prev;
reg [0:6] sign_expected_prev;
reg [0:6] student_id_expected_prev;
reg [0:6] upper_expected_prev;
reg [0:6] y/n_expected_prev;

reg [0:6] last_lower_exp;
reg [0:6] last_sign_exp;
reg [0:6] last_student_id_exp;
reg [0:6] last_upper_exp;
reg [0:6] last_y/n_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	lower_prev = lower;
	sign_prev = sign;
	student_id_prev = student_id;
	upper_prev = upper;
	y/n_prev = y/n;
end

// update expected /o prevs

always @(trigger)
begin
	lower_expected_prev = lower_expected;
	sign_expected_prev = sign_expected;
	student_id_expected_prev = student_id_expected;
	upper_expected_prev = upper_expected;
	y/n_expected_prev = y/n_expected;
end


// expected sign[ 6 ]
initial
begin
	sign_expected[6] = 1'bX;
end 
// expected sign[ 5 ]
initial
begin
	sign_expected[5] = 1'bX;
end 
// expected sign[ 4 ]
initial
begin
	sign_expected[4] = 1'bX;
end 
// expected sign[ 3 ]
initial
begin
	sign_expected[3] = 1'bX;
end 
// expected sign[ 2 ]
initial
begin
	sign_expected[2] = 1'bX;
end 
// expected sign[ 1 ]
initial
begin
	sign_expected[1] = 1'bX;
end 
// expected sign[ 0 ]
initial
begin
	sign_expected[0] = 1'bX;
end 
// expected upper[ 6 ]
initial
begin
	upper_expected[6] = 1'bX;
end 
// expected upper[ 5 ]
initial
begin
	upper_expected[5] = 1'bX;
end 
// expected upper[ 4 ]
initial
begin
	upper_expected[4] = 1'bX;
end 
// expected upper[ 3 ]
initial
begin
	upper_expected[3] = 1'bX;
end 
// expected upper[ 2 ]
initial
begin
	upper_expected[2] = 1'bX;
end 
// expected upper[ 1 ]
initial
begin
	upper_expected[1] = 1'bX;
end 
// expected upper[ 0 ]
initial
begin
	upper_expected[0] = 1'bX;
end 
// expected lower[ 6 ]
initial
begin
	lower_expected[6] = 1'bX;
end 
// expected lower[ 5 ]
initial
begin
	lower_expected[5] = 1'bX;
end 
// expected lower[ 4 ]
initial
begin
	lower_expected[4] = 1'bX;
end 
// expected lower[ 3 ]
initial
begin
	lower_expected[3] = 1'bX;
end 
// expected lower[ 2 ]
initial
begin
	lower_expected[2] = 1'bX;
end 
// expected lower[ 1 ]
initial
begin
	lower_expected[1] = 1'bX;
end 
// expected lower[ 0 ]
initial
begin
	lower_expected[0] = 1'bX;
end 
// expected student_id[ 6 ]
initial
begin
	student_id_expected[6] = 1'bX;
end 
// expected student_id[ 5 ]
initial
begin
	student_id_expected[5] = 1'bX;
end 
// expected student_id[ 4 ]
initial
begin
	student_id_expected[4] = 1'bX;
end 
// expected student_id[ 3 ]
initial
begin
	student_id_expected[3] = 1'b0;
	student_id_expected[3] = #170000 1'b1;
	student_id_expected[3] = #20000 1'b0;
end 
// expected student_id[ 2 ]
initial
begin
	student_id_expected[2] = 1'b1;
	student_id_expected[2] = #30000 1'b0;
	student_id_expected[2] = #80000 1'b1;
	student_id_expected[2] = #60000 1'b0;
end 
// expected student_id[ 1 ]
initial
begin
	student_id_expected[1] = 1'b0;
	student_id_expected[1] = #90000 1'b1;
	student_id_expected[1] = #60000 1'b0;
end 
// expected student_id[ 0 ]
initial
begin
	student_id_expected[0] = 1'b1;
	student_id_expected[0] = #30000 1'b0;
	student_id_expected[0] = #20000 1'b1;
	student_id_expected[0] = #80000 1'b0;
	student_id_expected[0] = #20000 1'b1;
	student_id_expected[0] = #40000 1'b0;
end 
// expected \y/n [ 6 ]
initial
begin
	y/n_expected[6] = 1'bX;
end 
// expected \y/n [ 5 ]
initial
begin
	y/n_expected[5] = 1'bX;
end 
// expected \y/n [ 4 ]
initial
begin
	y/n_expected[4] = 1'bX;
end 
// expected \y/n [ 3 ]
initial
begin
	y/n_expected[3] = 1'bX;
end 
// expected \y/n [ 2 ]
initial
begin
	y/n_expected[2] = 1'bX;
end 
// expected \y/n [ 1 ]
initial
begin
	y/n_expected[1] = 1'bX;
end 
// expected \y/n [ 0 ]
initial
begin
	y/n_expected[0] = 1'bX;
end 
// generate trigger
always @(lower_expected or lower or sign_expected or sign or student_id_expected or student_id or upper_expected or upper or y/n_expected or y/n)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected lower = %b | expected sign = %b | expected student_id = %b | expected upper = %b | expected y/n = %b | ",lower_expected_prev,sign_expected_prev,student_id_expected_prev,upper_expected_prev,y/n_expected_prev);
	$display("| real lower = %b | real sign = %b | real student_id = %b | real upper = %b | real y/n = %b | ",lower_prev,sign_prev,student_id_prev,upper_prev,y/n_prev);
`endif
	if (
		( lower_expected_prev[0] !== 1'bx ) && ( lower_prev[0] !== lower_expected_prev[0] )
		&& ((lower_expected_prev[0] !== last_lower_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lower[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lower_expected_prev);
		$display ("     Real value = %b", lower_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_lower_exp[0] = lower_expected_prev[0];
	end
	if (
		( lower_expected_prev[1] !== 1'bx ) && ( lower_prev[1] !== lower_expected_prev[1] )
		&& ((lower_expected_prev[1] !== last_lower_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lower[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lower_expected_prev);
		$display ("     Real value = %b", lower_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_lower_exp[1] = lower_expected_prev[1];
	end
	if (
		( lower_expected_prev[2] !== 1'bx ) && ( lower_prev[2] !== lower_expected_prev[2] )
		&& ((lower_expected_prev[2] !== last_lower_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lower[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lower_expected_prev);
		$display ("     Real value = %b", lower_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_lower_exp[2] = lower_expected_prev[2];
	end
	if (
		( lower_expected_prev[3] !== 1'bx ) && ( lower_prev[3] !== lower_expected_prev[3] )
		&& ((lower_expected_prev[3] !== last_lower_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lower[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lower_expected_prev);
		$display ("     Real value = %b", lower_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_lower_exp[3] = lower_expected_prev[3];
	end
	if (
		( lower_expected_prev[4] !== 1'bx ) && ( lower_prev[4] !== lower_expected_prev[4] )
		&& ((lower_expected_prev[4] !== last_lower_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lower[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lower_expected_prev);
		$display ("     Real value = %b", lower_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_lower_exp[4] = lower_expected_prev[4];
	end
	if (
		( lower_expected_prev[5] !== 1'bx ) && ( lower_prev[5] !== lower_expected_prev[5] )
		&& ((lower_expected_prev[5] !== last_lower_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lower[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lower_expected_prev);
		$display ("     Real value = %b", lower_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_lower_exp[5] = lower_expected_prev[5];
	end
	if (
		( lower_expected_prev[6] !== 1'bx ) && ( lower_prev[6] !== lower_expected_prev[6] )
		&& ((lower_expected_prev[6] !== last_lower_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lower[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lower_expected_prev);
		$display ("     Real value = %b", lower_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_lower_exp[6] = lower_expected_prev[6];
	end
	if (
		( sign_expected_prev[0] !== 1'bx ) && ( sign_prev[0] !== sign_expected_prev[0] )
		&& ((sign_expected_prev[0] !== last_sign_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sign_exp[0] = sign_expected_prev[0];
	end
	if (
		( sign_expected_prev[1] !== 1'bx ) && ( sign_prev[1] !== sign_expected_prev[1] )
		&& ((sign_expected_prev[1] !== last_sign_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sign_exp[1] = sign_expected_prev[1];
	end
	if (
		( sign_expected_prev[2] !== 1'bx ) && ( sign_prev[2] !== sign_expected_prev[2] )
		&& ((sign_expected_prev[2] !== last_sign_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sign_exp[2] = sign_expected_prev[2];
	end
	if (
		( sign_expected_prev[3] !== 1'bx ) && ( sign_prev[3] !== sign_expected_prev[3] )
		&& ((sign_expected_prev[3] !== last_sign_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sign_exp[3] = sign_expected_prev[3];
	end
	if (
		( sign_expected_prev[4] !== 1'bx ) && ( sign_prev[4] !== sign_expected_prev[4] )
		&& ((sign_expected_prev[4] !== last_sign_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sign_exp[4] = sign_expected_prev[4];
	end
	if (
		( sign_expected_prev[5] !== 1'bx ) && ( sign_prev[5] !== sign_expected_prev[5] )
		&& ((sign_expected_prev[5] !== last_sign_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sign_exp[5] = sign_expected_prev[5];
	end
	if (
		( sign_expected_prev[6] !== 1'bx ) && ( sign_prev[6] !== sign_expected_prev[6] )
		&& ((sign_expected_prev[6] !== last_sign_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sign_exp[6] = sign_expected_prev[6];
	end
	if (
		( student_id_expected_prev[0] !== 1'bx ) && ( student_id_prev[0] !== student_id_expected_prev[0] )
		&& ((student_id_expected_prev[0] !== last_student_id_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_student_id_exp[0] = student_id_expected_prev[0];
	end
	if (
		( student_id_expected_prev[1] !== 1'bx ) && ( student_id_prev[1] !== student_id_expected_prev[1] )
		&& ((student_id_expected_prev[1] !== last_student_id_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_student_id_exp[1] = student_id_expected_prev[1];
	end
	if (
		( student_id_expected_prev[2] !== 1'bx ) && ( student_id_prev[2] !== student_id_expected_prev[2] )
		&& ((student_id_expected_prev[2] !== last_student_id_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_student_id_exp[2] = student_id_expected_prev[2];
	end
	if (
		( student_id_expected_prev[3] !== 1'bx ) && ( student_id_prev[3] !== student_id_expected_prev[3] )
		&& ((student_id_expected_prev[3] !== last_student_id_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_student_id_exp[3] = student_id_expected_prev[3];
	end
	if (
		( student_id_expected_prev[4] !== 1'bx ) && ( student_id_prev[4] !== student_id_expected_prev[4] )
		&& ((student_id_expected_prev[4] !== last_student_id_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_student_id_exp[4] = student_id_expected_prev[4];
	end
	if (
		( student_id_expected_prev[5] !== 1'bx ) && ( student_id_prev[5] !== student_id_expected_prev[5] )
		&& ((student_id_expected_prev[5] !== last_student_id_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_student_id_exp[5] = student_id_expected_prev[5];
	end
	if (
		( student_id_expected_prev[6] !== 1'bx ) && ( student_id_prev[6] !== student_id_expected_prev[6] )
		&& ((student_id_expected_prev[6] !== last_student_id_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_student_id_exp[6] = student_id_expected_prev[6];
	end
	if (
		( upper_expected_prev[0] !== 1'bx ) && ( upper_prev[0] !== upper_expected_prev[0] )
		&& ((upper_expected_prev[0] !== last_upper_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port upper[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", upper_expected_prev);
		$display ("     Real value = %b", upper_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_upper_exp[0] = upper_expected_prev[0];
	end
	if (
		( upper_expected_prev[1] !== 1'bx ) && ( upper_prev[1] !== upper_expected_prev[1] )
		&& ((upper_expected_prev[1] !== last_upper_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port upper[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", upper_expected_prev);
		$display ("     Real value = %b", upper_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_upper_exp[1] = upper_expected_prev[1];
	end
	if (
		( upper_expected_prev[2] !== 1'bx ) && ( upper_prev[2] !== upper_expected_prev[2] )
		&& ((upper_expected_prev[2] !== last_upper_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port upper[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", upper_expected_prev);
		$display ("     Real value = %b", upper_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_upper_exp[2] = upper_expected_prev[2];
	end
	if (
		( upper_expected_prev[3] !== 1'bx ) && ( upper_prev[3] !== upper_expected_prev[3] )
		&& ((upper_expected_prev[3] !== last_upper_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port upper[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", upper_expected_prev);
		$display ("     Real value = %b", upper_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_upper_exp[3] = upper_expected_prev[3];
	end
	if (
		( upper_expected_prev[4] !== 1'bx ) && ( upper_prev[4] !== upper_expected_prev[4] )
		&& ((upper_expected_prev[4] !== last_upper_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port upper[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", upper_expected_prev);
		$display ("     Real value = %b", upper_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_upper_exp[4] = upper_expected_prev[4];
	end
	if (
		( upper_expected_prev[5] !== 1'bx ) && ( upper_prev[5] !== upper_expected_prev[5] )
		&& ((upper_expected_prev[5] !== last_upper_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port upper[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", upper_expected_prev);
		$display ("     Real value = %b", upper_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_upper_exp[5] = upper_expected_prev[5];
	end
	if (
		( upper_expected_prev[6] !== 1'bx ) && ( upper_prev[6] !== upper_expected_prev[6] )
		&& ((upper_expected_prev[6] !== last_upper_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port upper[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", upper_expected_prev);
		$display ("     Real value = %b", upper_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_upper_exp[6] = upper_expected_prev[6];
	end
	if (
		( y/n_expected_prev[0] !== 1'bx ) && ( y/n_prev[0] !== y/n_expected_prev[0] )
		&& ((y/n_expected_prev[0] !== last_y/n_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y/n[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y/n_expected_prev);
		$display ("     Real value = %b", y/n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y/n_exp[0] = y/n_expected_prev[0];
	end
	if (
		( y/n_expected_prev[1] !== 1'bx ) && ( y/n_prev[1] !== y/n_expected_prev[1] )
		&& ((y/n_expected_prev[1] !== last_y/n_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y/n[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y/n_expected_prev);
		$display ("     Real value = %b", y/n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y/n_exp[1] = y/n_expected_prev[1];
	end
	if (
		( y/n_expected_prev[2] !== 1'bx ) && ( y/n_prev[2] !== y/n_expected_prev[2] )
		&& ((y/n_expected_prev[2] !== last_y/n_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y/n[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y/n_expected_prev);
		$display ("     Real value = %b", y/n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y/n_exp[2] = y/n_expected_prev[2];
	end
	if (
		( y/n_expected_prev[3] !== 1'bx ) && ( y/n_prev[3] !== y/n_expected_prev[3] )
		&& ((y/n_expected_prev[3] !== last_y/n_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y/n[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y/n_expected_prev);
		$display ("     Real value = %b", y/n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y/n_exp[3] = y/n_expected_prev[3];
	end
	if (
		( y/n_expected_prev[4] !== 1'bx ) && ( y/n_prev[4] !== y/n_expected_prev[4] )
		&& ((y/n_expected_prev[4] !== last_y/n_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y/n[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y/n_expected_prev);
		$display ("     Real value = %b", y/n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y/n_exp[4] = y/n_expected_prev[4];
	end
	if (
		( y/n_expected_prev[5] !== 1'bx ) && ( y/n_prev[5] !== y/n_expected_prev[5] )
		&& ((y/n_expected_prev[5] !== last_y/n_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y/n[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y/n_expected_prev);
		$display ("     Real value = %b", y/n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y/n_exp[5] = y/n_expected_prev[5];
	end
	if (
		( y/n_expected_prev[6] !== 1'bx ) && ( y/n_prev[6] !== y/n_expected_prev[6] )
		&& ((y/n_expected_prev[6] !== last_y/n_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y/n[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y/n_expected_prev);
		$display ("     Real value = %b", y/n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_y/n_exp[6] = y/n_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab6pt3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg clk;
reg En;
reg resetA;
reg resetB;
reg resetFSM;
// wires                                               
wire [0:6] lower;
wire [0:6] sign;
wire [0:6] student_id;
wire [0:6] upper;
wire [0:6] y/n;

wire sampler;                             

// assign statements (if any)                          
lab6pt3 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.clk(clk),
	.En(En),
	.lower(lower),
	.resetA(resetA),
	.resetB(resetB),
	.resetFSM(resetFSM),
	.sign(sign),
	.student_id(student_id),
	.upper(upper),
	.\y/n (y/n)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b1;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// En
initial
begin
	En = 1'b1;
end 

// resetA
initial
begin
	resetA = 1'b1;
end 

// resetB
initial
begin
	resetB = 1'b1;
end 

// resetFSM
initial
begin
	resetFSM = 1'b0;
end 

lab6pt3_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.clk(clk),
	.En(En),
	.resetA(resetA),
	.resetB(resetB),
	.resetFSM(resetFSM),
	.sampler_tx(sampler)
);

lab6pt3_vlg_check_tst tb_out(
	.lower(lower),
	.sign(sign),
	.student_id(student_id),
	.upper(upper),
	.y/n(y/n),
	.sampler_rx(sampler)
);
endmodule

