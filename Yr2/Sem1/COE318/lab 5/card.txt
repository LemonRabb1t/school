package coe318.lab5;

/**
 *
 * @author N
 */
public class Card implements Comparable {
    //Symbolic constants

    public static final int CLUB = 0;
    public static final int DIAMOND = 1;
    public static final int HEART = 2;
    public static final int SPADE = 3;

    // vars
    int Rank;
    int Suit;
    boolean face;

    /**
     * Construct a card of the given rank, suit and whether it is faceup or
     * facedown. The rank is an integer from 2 to 14. Numbered cards (2 to 10)
     * have a rank equal to their number. Jack, Queen, King and Ace have the
     * ranks 11, 12, 13, and 14 respectively. The suit is an integer from 0 to 3
     * for Clubs, Diamonds, Hearts and Spades respectively.
     *
     * @param rank
     * @param suit
     * @param faceUp
     */
    public Card(int rank, int suit, boolean faceUp) {
        setFaceUp(faceUp);
        Rank = rank;
        Suit = suit;
    }

    /**
     * @return the faceUp
     */
    public boolean isFaceUp() {
        return face; //FIX THIS
    }

    /**
     * @param faceUp the faceUp to set
     */
    public void setFaceUp(boolean faceUp) {
        face = faceUp;
    }

    /**
     * @return the rank
     */
    public int getRank() {
        return Rank; //FIX THIS
    }

    /**
     * @return the suit
     */
    public int getSuit() {
        return Suit;//FIX THIS
    }

    @Override
    public boolean equals(Object ob) {
        if (compareTo(ob) == 0) { // if compareto finds that suit & rank same, same card
            return true;
        } else {
            return false; //FIX THIS
        }
    }

    @Override
    public int hashCode() {//DO NOT MODIFY
        int hash = 7;
        hash = 31 * hash + this.getRank();
        hash = 31 * hash + this.getSuit();
        return hash;
    }

    @Override
    public int compareTo(Object obj) {//DO NOT MODIFY
        return compareTo((Card) obj);
    }

    public int compareTo(Card c) {

        if (this.getRank() > c.getRank()) { //if card greater
            return 1;
        } else if (this.getRank() == c.getRank()) { // if card equal
            if (getSuit() > c.getSuit()) { // this suit greater
                return 1;//FIX THIS
            } else if (getSuit() == c.getSuit()) { // this suit same
                return 0;
            } else { // this suit smaller 
                return -1;
            }
        } else { // if card smaller
            return -1;
        }
    }

    /**
     * Return the rank as a String. For example, the 3 of Hearts produces the
     * String "3". The King of Diamonds produces the String "King".
     *
     * @return the rank String
     */
    public String getRankString() {
        switch (Rank) {
            case 2:
                return "Two";
            case 3:
                return "Three";
            case 4:
                return "Four";
            case 5:
                return "Five";
            case 6:
                return "Six";
            case 7:
                return "Seven";
            case 8:
                return "Eight";
            case 9:
                return "Nine";
            case 10:
                return "Ten";
            case 11:
                return "Jack";
            case 12:
                return "Queen";
            case 13:
                return "King";
            case 14:
                return "Ace";
            default:
                return "Error";
        }

        //FIX THIS
    }

    /**
     * Return the suit as a String: "Clubs", "Diamonds", "Hearts" or "Spades".
     *
     * @return the suit String
     */
    public String getSuitString() {
        switch (Suit) {
            case 0:
                return "Clubs";
            case 1:
                return "Diamonds";
            case 2:
                return "Hearts";
            case 3:
                return "Spades";
            default:
                return "Error";
        }//FIX THIS
    }

    /**
     * Return "?" if the card is facedown; otherwise, the rank and suit of the
     * card.
     *
     * @return the String representation
     */
    @Override
    public String toString() {
        if (isFaceUp() == false) {
            return "?";
        } else {
            return this.getRankString() + " " + this.getSuitString();
        }
        //FIX THIS
    }

    public static void main(String[] args) {
        //Create 5 of clubs
        Card club5 = new Card(5, 0, true);
        System.out.println("club5: " + club5);
        Card spadeAce = new Card(14, SPADE, true);
        System.out.println("spadeAce: " + spadeAce);
        System.out.println("club5 compareTo spadeAce: "
                + club5.compareTo(spadeAce));
        System.out.println("club5 compareTo club5: "
                + club5.compareTo(club5));
        System.out.println("club5 equals spadeAce: "
                + club5.equals(spadeAce));
        System.out.println("club5 equals club5: "
                + club5.equals(club5));
    }
}
